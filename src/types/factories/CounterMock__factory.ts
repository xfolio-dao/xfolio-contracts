/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CounterMock, CounterMockInterface } from "../CounterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_endpoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_messageCounter",
        type: "uint256",
      },
    ],
    name: "MessageReceived",
    type: "event",
  },
  {
    inputs: [],
    name: "endpoint",
    outputs: [
      {
        internalType: "contract ILayerZeroEndpoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "bytes",
        name: "_dstCounterMockAddress",
        type: "bytes",
      },
    ],
    name: "incrementCounter",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "bytes",
        name: "_fromAddress",
        type: "bytes",
      },
      {
        internalType: "uint64",
        name: "_nonce",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "_payload",
        type: "bytes",
      },
    ],
    name: "lzReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161061b38038061061b8339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610586806100956000396000f3fe6080604052600436106100335760003560e01c80621d3567146100385780635e280f11146101b9578063ed0cc14f146101fa575b600080fd5b34801561004457600080fd5b506101b76004803603608081101561005b57600080fd5b81019080803561ffff1690602001909291908035906020019064010000000081111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460018302840111640100000000831117156100ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803567ffffffffffffffff1690602001909291908035906020019064010000000081111561013157600080fd5b82018360208201111561014357600080fd5b8035906020019184600183028401116401000000008311171561016557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610281565b005b3480156101c557600080fd5b506101ce61032a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61027f6004803603604081101561021057600080fd5b81019080803561ffff1690602001909291908035906020019064010000000081111561023b57600080fd5b82018360208201111561024d57600080fd5b8035906020019184600183028401116401000000008311171561026f57600080fd5b9091929391929390505050610350565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102db57600080fd5b600160008082825401925050819055507fd975dc53483f681e69c6732f27f4976038dcb70b17188c82e43b48534a5bd4fc6000546040518082815260200191505060405180910390a150505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c58031003485858560405180602001604052806000815250336000604051806020016040528060008152506040518963ffffffff1660e01b8152600401808861ffff16815260200180602001806020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018060200184810384528a8a82818152602001925080828437600081840152601f19601f820116905080830192505050848103835288818151815260200191508051906020019080838360005b8381101561047957808201518184015260208101905061045e565b50505050905090810190601f1680156104a65780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156104df5780820151818401526020810190506104c4565b50505050905090810190601f16801561050c5780820380516001836020036101000a031916815260200191505b509a50505050505050505050506000604051808303818588803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b505050505050505056fea2646970667358221220316b247087148e9c0c462ea443d45d3810a0d4a8ee641a7a602b4e557b455df864736f6c63430007060033";

export class CounterMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _endpoint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CounterMock> {
    return super.deploy(_endpoint, overrides || {}) as Promise<CounterMock>;
  }
  getDeployTransaction(
    _endpoint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_endpoint, overrides || {});
  }
  attach(address: string): CounterMock {
    return super.attach(address) as CounterMock;
  }
  connect(signer: Signer): CounterMock__factory {
    return super.connect(signer) as CounterMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterMockInterface {
    return new utils.Interface(_abi) as CounterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CounterMock {
    return new Contract(address, _abi, signerOrProvider) as CounterMock;
  }
}
